
#version 430

layout (local_size_x = 1024) in;

struct Particle
{
    vec4 position;
    vec4 velocity;
};

struct Voxel
{
    vec4 velocity;
    vec4 staggeredVelocity;
    vec4 newStaggeredVelocity;
};

layout(binding = 1) buffer particlesBlock
{
    Particle particles[];
};

layout(binding = 2) buffer voxelsBlock
{
    Voxel voxels[];
};

void main()
{
    uint index = gl_GlobalInvocationID.x;
    vec3 p = particles[index].position.xyz;
    
    // Calculte the voxel where is the particles
    uint voxel_index = uint((30.0*30.0*p.y) + (30.0*p.z) + p.x);

    // Update the velocity of the particles
    particles[index].velocity = voxels[voxel_index].velocity;

    // 
    vec3 v = particles[index].velocity.xyz;

    p += (1.0/60.0) * v;

    if(p.x < 0)
    {
    	p.x = 0;
    }
    if(p.x > 29)
    {
    	p.x = 29;
    }

    if(p.y < 0)
    {
    	p.y = 0;
    }
    if(p.y > 29)
    {
    	p.y = 29;
    }

    if(p.z < 0)
    {
    	p.z = 0;
    }
    if(p.z > 29)
    {
    	p.z = 29;
    }
    


    particles[index].position = vec4(p, 1.0);
}